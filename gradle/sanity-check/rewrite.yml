type: specs.openrewrite.org/v1beta/recipe
name: org.gradle.GradleSanityCheck
displayName: Gradle Sanity Check
description: |
  A comprehensive sanity-check recipe that integrates Gradle-driven
  auto-fixes with additional OpenRewrite best practices and static analysis.
  This recipe is intended as a higher-level entry point for improving Java
  code quality across large projects.

  It combines:
    * **Checkstyle-based auto-fixes** – automatically applies corrections
      for violations reported by Checkstyle.
    * **License header enforcement** – ensures all files comply with the
      project’s licensing policy.
    * **Static analysis and cleanup** – removes unused code, enforces
      consistent annotations and modifiers, and aligns code with modern
      Java best practices.
    * **Error Prone & Refaster rules (via Picnic Tech)** – applies advanced
      correctness and performance improvements validated by the Error Prone
      ecosystem.

  The goal is to provide a single, opinionated recipe that enforces code
  consistency, prevents common bugs, and ensures maintainable, high-quality
  Java codebases. Intended to be used continuously (e.g., in CI pipelines)
  to avoid style regressions and drift from standards.
tags:
  - checkstyle
  - autofix
  - static-analysis
  - java
  - code-quality
recipeList:
  - tech.picnic.errorprone.refasterrules.StreamRulesRecipes
  # Potential future additions:
  # - org.gradle.CheckstyleAutoFix
  # - org.gradle.GradleLicenseHeader
  # - org.openrewrite.java.RemoveUnusedImports
  # - org.openrewrite.java.recipes.JavaRecipeBestPractices
  # - org.openrewrite.staticanalysis.JavaApiBestPractices
  # - org.openrewrite.staticanalysis.LowercasePackage
  # - org.openrewrite.staticanalysis.MissingOverrideAnnotation
  # - org.openrewrite.staticanalysis.ModifierOrder
  # - org.openrewrite.staticanalysis.NoFinalizer
  # - org.openrewrite.staticanalysis.RemoveUnusedLocalVariables
  # - org.openrewrite.staticanalysis.RemoveUnusedPrivateFields
  # - org.openrewrite.staticanalysis.RemoveUnusedPrivateMethods
  # - tech.picnic.errorprone.refasterrules.BigDecimalRulesRecipes
  # - tech.picnic.errorprone.refasterrules.CharSequenceRulesRecipes
  # - tech.picnic.errorprone.refasterrules.ClassRulesRecipes
  # - tech.picnic.errorprone.refasterrules.CollectionRulesRecipes
  # - tech.picnic.errorprone.refasterrules.ComparatorRulesRecipes
  # - tech.picnic.errorprone.refasterrules.MicrometerRulesRecipes
  # - tech.picnic.errorprone.refasterrules.PatternRulesRecipes
  # - tech.picnic.errorprone.refasterrules.PrimitiveRulesRecipes
  # - tech.picnic.errorprone.refasterrules.TimeRulesRecipes
  # - org.openrewrite.java.OrderImports apply GradleImportLayout, currently bug
  # - org.openrewrite.java.migrate.UpgradeToJava17 #pull/17730
  # - org.openrewrite.java.migrate.UpgradeToJava25 #issue/17734
  # - org.openrewrite.java.recipes.RecipeNullabilityBestPractices
  # - org.openrewrite.java.recipes.RecipeTestingBestPractices
  # - org.openrewrite.maven.BestPractices
  # - org.openrewrite.staticanalysis.CodeCleanup
  # - org.openrewrite.staticanalysis.CommonStaticAnalysis
  # - org.openrewrite.staticanalysis.EqualsAvoidsNull
  # - org.openrewrite.staticanalysis.UnnecessaryThrows
  # - tech.picnic.errorprone.refasterrules.EqualityRulesRecipes
  # - tech.picnic.errorprone.refasterrules.FileRulesRecipes
  # - tech.picnic.errorprone.refasterrules.NullRulesRecipes
  # - tech.picnic.errorprone.refasterrules.OptionalRulesRecipes
  # - tech.picnic.errorprone.refasterrules.PreconditionsRulesRecipes
  # - tech.picnic.errorprone.refasterrules.StringRulesRecipes
---
